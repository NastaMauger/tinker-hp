#
#   Makefile for Tinker-HP with Intel Compiler
#

# top-level directory
makefile_path__ := $(abspath $(lastword $(MAKEFILE_LIST)))
makefile_dir__  := $(dir $(makefile_path__))
# `make' will not complain if file `top_dir.mk' does not exist
-include top_dir.mk
ifeq (,$(top_dir__))
   top_dir__ := $(realpath $(makefile_dir__)/..)
endif

##  Compiler type
##   (gnu/intel)
compiler := intel

##  Optimisation type
##  (debug/release)
opt := release

#---------------------------
#    Program suffix config
prog_suffix :=

#--------------------------
#    Binary directory
prefix      :=../bin

##  Compiler
#
ifeq ($(compiler), intel)
   RunF77 = mpiifort
else
   RunF77 = mpif90
endif

# Plumed Feature
PLUMED_SUPPORT ?= 0
PLUMED_HOME   ?= ../plumed/Portland

INC_PLUMED     = $(PLUMED_HOME)/include
LIB_PLUMED     = $(PLUMED_HOME)/lib -lplumed -lplumedKernel
plumed_config_file = Makefile.conf.nvhpc

##  Linking libraries (MKL,FFT,2DECOMP)
#
#MKLDIR = /opt/intel/mkl/
MKLDIR = $(MKLROOT)

#FFTDIR = /usr/local/fftw-3.3.4/
#LIB_FFT = -L$(FFTW_DIR) -lfftw3
LIB_FFT =. 

FFTDECOMPDIR = ../2decomp_fft
FFTDECOMP    = -I$(FFTDECOMPDIR)/include

#LDLIBS   = -lm -I$(MKLDIR)/include  -L$(MKLDIR)/lib/intel64 -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -liomp5 -lpthread -L$(FFTDECOMPDIR)/lib -l2decomp_fft $(LIB_FFT)
LDLIBS   = -lm -I$(MKLDIR)/include -L$(MKLDIR)/lib/intel64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lpthread -L$(FFTDECOMPDIR)/lib -l2decomp_fft -L$(LIB_FFT)

LIBS   = libtinker.a
depend_targets :=

ifeq ($(PLUMED_SUPPORT),1)
   LDLIBS += -L$(LIB_PLUMED)
   depend_targets += plumed
endif

OPTIONS  :=
ifeq ($(PLUMED_SUPPORT),1)
   OPTIONS   += -DPLUMED
endif

#
#  Compile flags
#
CPPFLAGS  = -cpp $(OPTIONS)

ifeq ($(compiler), intel)
   ifeq ($(opt), release)
     #OPTIM = -O3 -xCORE-AVX512 -no-ipo -no-prec-div -shared-intel -align array64byte -falign-functions=64 -qopt-report-phase=vec -qopt-report=5  -qopt-zmm-usage=high -qoverride-limits -g -traceback # -check bounds # -S 
      OPTIM = -O3 -xHost -no-ipo -no-prec-div -heap-arrays -traceback
   else
      OPTIM = -O0 -g -traceback
   endif
   ADDFLAGS =
else ifeq ($(compiler), gnu)
   ifeq ($(opt), release)
      OPTIM = -O3 -fno-align-commons -g
   else
      OPTIM = -O0 -g -fbacktrace -fcheck=bounds -Wall -Wno-unused-variable -Wno-unused-dummy-argument -Wno-unused-function -Wno-maybe-uninitialized -Wno-unused-label
   endif
   ADDFLAGS = -fbackslash
endif

FFLAGS  = $(CPPFLAGS) $(OPTIM)
#
## Linker additional flags
##
ifeq ($(compiler), intel)
   FFLAGS2 = -mkl=sequential -qopenmp-stubs
else
   FFLAGS2 =
endif

MODSAM = MOD_tinheader.o MOD_nvtx.o MOD_sizes.o MOD_memory.o\
   MOD_abinitio.o MOD_action.o MOD_analyz.o MOD_angang.o MOD_angle.o\
   MOD_angpot.o MOD_angtor.o MOD_ani.o MOD_argue.o MOD_ascii.o MOD_atmlst.o\
   MOD_atoms.o MOD_atmtyp.o MOD_bath.o MOD_beads.o MOD_bitor.o\
   MOD_bndpot.o MOD_bond.o MOD_bound.o MOD_boxes.o\
   MOD_cell.o MOD_charge.o MOD_chgpot.o MOD_chunks.o\
   MOD_couple.o MOD_cutoff.o MOD_dcdio.o MOD_deconvolution.o MOD_deriv.o MOD_divcon.o\
   MOD_domdec.o MOD_energi.o MOD_ewald.o MOD_fft.o\
   MOD_fields.o MOD_files.o MOD_freeze.o MOD_group.o\
   MOD_improp.o MOD_imptor.o MOD_inform.o MOD_inter.o MOD_interfaces.o\
   MOD_iounit.o MOD_kanang.o MOD_kangs.o MOD_katoms.o\
   MOD_kbonds.o MOD_kchrge.o MOD_keys.o MOD_khbond.o\
   MOD_kiprop.o MOD_kgeoms.o MOD_kitors.o MOD_kmulti.o\
   MOD_kopbnd.o MOD_kopdst.o MOD_kpitor.o MOD_kpolr.o\
   MOD_kstbnd.o MOD_ksttor.o MOD_ktorsn.o MOD_ktrtor.o\
   MOD_kurybr.o MOD_kvdwpr.o MOD_kvdws.o MOD_langevin.o\
   MOD_linmin.o
MODSNZ = MOD_math.o MOD_mamd.o MOD_msmd.o MOD_merck.o MOD_mpole.o MOD_mdstuf.o\
   MOD_commstuffpi.o \
   MOD_minima.o MOD_molcul.o MOD_moldyn.o MOD_mplpot.o\
   MOD_mutant.o MOD_neigh.o MOD_opbend.o MOD_opdist.o\
   MOD_output.o MOD_orthogonalize.o MOD_params.o MOD_pitors.o MOD_pme.o\
   MOD_polar.o MOD_polgrp.o MOD_polpot.o MOD_erf.o\
   MOD_potent.o MOD_precis.o MOD_ptable.o MOD_qtb.o MOD_random.o MOD_resdue.o\
   MOD_ring.o MOD_scales.o MOD_shunt.o MOD_spectra.o MOD_strbnd.o\
   MOD_strtor.o MOD_timestat.o MOD_titles.o MOD_torpot.o\
   MOD_tors.o MOD_tortor.o MOD_units.o MOD_uprior.o\
   MOD_urey.o MOD_urypot.o MOD_usage.o MOD_vdwpot.o MOD_virial.o\
   MOD_vdw.o MOD_utilbaoab.o MOD_utilbaoabpi.o MOD_utils.o MOD_utilcomm.o MOD_utilvec.o MOD_utilgpu.o\
	MOD_subDeriv.o MOD_subMemory.o MOD_subInform.o MOD_subAtoms.o\
   MOD_vec.o MOD_vec_elec.o MOD_vec_vdw.o\
   MOD_vec_list.o MOD_vec_mpole.o MOD_vec_polar.o MOD_vec_charge.o\
   MOD_precompute_polegpu.o MOD_USampling.o

OBJSAM = active.o analysis.o analyze.o angles.o\
   attach.o bar.o basefile.o beeman.o bicubic.o\
   baoab.o baoabrespa.o baoabrespa1.o baoabpi.o baoabrespapi.o bbk.o\
   bitors.o bonds.o bounds.o calendar.o\
   chkpole.o chkpolegpu.o chkring.o chkxyz.o cholesky.o cluster.o\
   command.o control.o cspline.o\
   cutoffs.o dcdio.o diis.o domdecstuff.o dynamic.o\
   dcinduce_pme.o dcinduce_pmegpu.o dcinduce_pme2.o dcinduce_pme2gpu.o dcinduce_shortreal.o dcinduce_shortrealgpu.o\
   eamd1.o eangang.o eangang1.o eangang3.o\
   eangle.o eangle1.o eangle1gpu.o eangle3.o eangle3gpu.o\
	eangtor.o eangtor1.o eangtor3.o\
   ebond.o ebond1.o ebond1gpu.o ebond3.o ebond3gpu.o\
   echarge.o echarge1.o echarge1vec.o echarge1gpu.o echarge3.o echarge3vec.o echarge3gpu.o\
   efld0_direct.o efld0_directvec.o efld0_directgpu.o\
   egeom.o egeom1.o egeom1gpu.o egeom3.o egeom3gpu.o\
   ehal.o ehal1.o ehal1vec.o ehal1gpu.o ehal3.o ehal3vec.o ehal3gpu.o\
   eimprop.o eimprop1.o eimprop3.o\
   eimptor.o eimptor1.o eimptor3.o\
   elj.o elj1.o elj1vec.o eimprop1gpu.o elj1gpu.o elj3.o elj3vec.o elj3gpu.o\
   empole.o empole0.o empole1.o empole1vec.o empole1gpu.o empole1_group.o\
   empole3.o  empole3vec.o empole3gpu.o empole3_group.o\
   energy.o eopbend.o eopbend1.o eopbend1gpu.o  eopbend3.o eopbend3gpu.o\
   eopdist.o eopdist1.o eopdist3.o\
   epitors.o epitors1.o epitors1gpu.o epitors3.o\
   epolar.o epolarvec.o epolar1.o epolar1vec.o epolar1gpu.o epolar1_group.o\
   epolar3.o epolar3vec.o epolar3gpu.o epolar3_group.o\
   eprecip1vec.o esmd1.o\
   estrbnd.o estrbnd1.o estrbnd1gpu.o estrbnd3.o\
   estrtor.o estrtor1.o estrtor1gpu.o estrtor3.o\
   etors.o etors1.o etors1gpu.o etors3.o\
   etortor.o etortor1.o etortor1gpu.o etortor3.o\
   eurey.o eurey1.o eurey1gpu.o eurey3.o  eurey3gpu.o\
   evcorr.o extra.o extra1.o extra3.o\
   fatal.o fft_mpi.o field.o\
   final.o freeunit.o geometry.o getkey.o\
   getnumb.o getprm.o getstring.o gettext.o\
   getword.o getxyz.o gradient.o\
   groups.o image.o\
   initatom.o initial.o initprm.o initres.o\
   invert.o kangang.o kangle.o\
   kamd.o katom.o kangtor.o kbond.o kcharge.o kewald.o kgeom.o\
   kimprop.o kimptor.o kinetic.o kmlpot.o kmpole.o\
   kopbend.o kopdist.o kpitors.o kpolar.o\
   kstrbnd.o kstrtor.o kscalfactor.o ksmd.o ktors.o ktortor.o\
   kurey.o kvdw.o lattice.o lbfgs.o\
   linalg.o maxwell.o mdinit.o mdrest.o\
   mdsave.o mdsavebeads.o mdstat.o mdstatpi.o mechanic.o minimize.o\
   molecule.o mpistuff.o mutate.o

OBJSNZ = nblist.o nblistvec.o nblistgpu.o newinduce_pme.o newinduce_pmevec.o newinduce_pmegpu.o\
   newinduce_pme2.o newinduce_pme2vec.o newinduce_pme2gpu.o newinduce_group.o\
   newinduce_shortreal.o newinduce_shortrealgpu.o\
   nextarg.o nexttext.o nspline.o number.o\
   numeral.o orthogonalize.o openend.o optsave.o pimd.o plumed.o pmestuff.o pmestuffgpu.o\
   precise.o pressure.o prime.o promo.o promoamd.o promosmd.o prmkey.o\
   prtdyn.o prtxyz.o radial.o readdyn.o\
   readprm.o readxyz.o respa.o respa1.o\
   rings.o rotpole.o rotpolegpu.o search.o sort.o\
   rattle.o shakeup.o\
   suffix.o switch.o switch_group.o temper.o testgrad.o tmatxb_pme.o tmatxb_pmevec.o tmatxb_pmegpu.o\
   torphase.o torque.o torquegpu.o torquevec2.o torsions.o trimtext.o\
   unitcell.o verlet.o version.o

MODS   = $(MODSAM) $(MODSNZ)
OBJS   = $(OBJSAM) $(OBJSNZ)

all: libtinker analyze dynamic testgrad minimize bar pimd radial

everything: libtinker analyze dynamic testgrad bar pimd radial


#  Installation program target
install__%:
	mv $*.x $(prefix)/$*$(prog_suffix)
 
## Make build directory
##
BUILD_DIR     := ../build.gnu
TINKER_SOURCE := ../source
.PHONY: create_build
create_build:
	mkdir -p $(BUILD_DIR)
	@echo "Copy tinker source files and Makefile.gfortran to $(BUILD_DIR)"
	@cd $(BUILD_DIR); ln -s $(TINKER_SOURCE)/*.f .
	@cd $(BUILD_DIR); ln -s $(TINKER_SOURCE)/*.f90 .
	@cd $(BUILD_DIR); ln -s $(TINKER_SOURCE)/*.f.inc .
	@cd $(BUILD_DIR); ln -s $(TINKER_SOURCE)/*.h .
	@cd $(BUILD_DIR); ln -s $(TINKER_SOURCE)/*.make .
	@cd $(BUILD_DIR); ln -s $(TINKER_SOURCE)/Makefile.gfortran Makefile
	@cd $(BUILD_DIR); rm *cu.f
	@echo "--- done ---"

##
##  Infos
infos:
	@echo " Compiler            " $(compiler)
	@echo " Fortran Compiler    " $(RunF77)
	@echo " optimisation build  " $(opt)
	@echo " Preprocess Options  " $(CPPFLAGS)
	@echo " optim config        " $(OPTIM) $(ADDFLAGS)
	@echo " Install Directory   " $(prefix)

#
analyze: libtinker
	$(RunF77) $(FFLAGS) $(FFLAGS2) -o analyze.x analyze.o $(LIBS) $(LDLIBS)
	mv analyze.x $(prefix)/$@$(prog_suffix)
#
analyze.OK: $(MODS) $(OBJS)
	$(RunF77) $(FFLAGS) $(FFLAGS2) -o analyze.x analyze.o $(LIBS) $(LDLIBS)
	strip analyze.x
	mv analyze.x $(prefix)/$@
#
dynamic: libtinker
	$(RunF77) $(FFLAGS) $(FFLAGS2) -o dynamic.x dynamic.o $(LIBS) $(LDLIBS)
	mv dynamic.x $(prefix)/$@$(prog_suffix)
#
dynamic.OK: libtinker
	$(RunF77) $(FFLAGS) $(FFLAGS2) -o dynamic.x dynamic.o $(LIBS) $(LDLIBS)
	strip dynamic.x
	mv dynamic.x $(prefix)/$@
#
testgrad: libtinker
	$(RunF77) $(FFLAGS) $(FFLAGS2) -o testgrad.x testgrad.o $(LIBS) $(LDLIBS)
	mv testgrad.x $(prefix)/$@$(prog_suffix)
#
testgrad.OK: libtinker
	$(RunF77) $(FFLAGS) $(FFLAGS2) -o testgrad.x testgrad.o $(LIBS) $(LDLIBS)
	strip testgrad.x
	mv testgrad.x $(prefix)/$@
#
minimize: libtinker
	$(RunF77) $(FFLAGS) $(FFLAGS2) -o minimize.x minimize.o $(LIBS) $(LDLIBS)
	mv minimize.x $(prefix)/$@$(prog_suffix)
#
minimize.OK: libtinker
	$(RunF77) $(FFLAGS) $(FFLAGS2) -o minimize.x minimize.o $(LIBS) $(LDLIBS)
	strip minimize.x
	mv minimize.x $(prefix)/$@
#
bar: libtinker
	$(RunF77) $(FFLAGS) $(FFLAGS2) -o bar.x bar.o $(LIBS) $(LDLIBS)
	mv bar.x $(prefix)/$@$(prog_suffix)
#
pimd: libtinker
	$(RunF77) $(FFLAGS) $(FFLAGS2) -o pimd.x pimd.o $(LIBS) $(LDLIBS)
	mv pimd.x $(prefix)/$@$(prog_suffix)
#
radial: libtinker
	$(RunF77) $(FFLAGS) $(FFLAGS2) -o radial.x radial.o $(LIBS) $(LDLIBS)
	mv radial.x $(prefix)/$@$(prog_suffix)
#
radial.OK: $(MODS) $(OBJS)
	$(RunF77) $(FFLAGS) $(FFLAGS2) -o radial.x radial.o $(LIBS) $(LDLIBS)
	strip radial.x
	mv radial.x $(prefix)/$@
#
libtinker: $(MODS) $(OBJS)
	./library_host.make
 

# Absolute dependencies between files and modules
MOD_subAtoms.o: MOD_atoms.o
MOD_subMemory.o: MOD_memory.o
MOD_subDeriv.o: MOD_deriv.o
MOD_subInform.o: MOD_inform.o

#
## Generics Rules
MOD_spectra.o: MOD_spectra.f
	$(RunF77) $(FFLAGS) -c $*.f $(FFTDECOMP)
MOD_qtb.o: MOD_qtb.f
	$(RunF77) $(FFLAGS) -c $*.f $(FFTDECOMP)
promo%.o: promo%.f
	$(RunF77) $(FFLAGS) $(ADDFLAGS) -c promo$*.f
%.o: %.f
	$(RunF77) $(FFLAGS) -c $*.f
%.o: %.F
	$(RunF77) $(FFLAGS) -c $*.F
%.o: %.f90
	$(RunF77) $(FFLAGS) -c $*.f90 $(FFTDECOMP)

#
#  Cleaning rules
#
clean:
	rm -fr $(MODS) $(OBJS) *.exe *.mod
	rm -f libtinker.a 

#
#  Plumed Package
#
.PHONY: plumed
plumed:
	@(cd ../plumed2 && ln -sf $(plumed_config_file) Makefile.conf && \
	  $(MAKE) install VERBOSE=1)

#
# 2decomp_fft library rules
#
2decomp_fft_install:
	cd ../2decomp_fft; $(MAKE) "OPTIM=$(OPTIM)"
2decomp_fft_clean:
	cd ../2decomp_fft; $(MAKE) clean
2decomp_fft_rebuild:
	cd ../2decomp_fft; $(MAKE) clean; $(MAKE) "OPTIM=$(OPTIM)"
#
tags: tags-mark
	-'rm' -f tags
	ctags *.f
	-'rm' -f tags-mark

tags-mark:
	touch tags-mark

debug:
	cat *.f > xxx.f
	ftnchek xxx.f
	rm xxx.f
